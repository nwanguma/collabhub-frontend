{"version":3,"file":"useLocations.js","sourceRoot":"/","sources":["app/hooks/useLocations.ts"],"names":[],"mappings":";;;;;;AAAA,uDAAkE;AAClE,wEAAgD;AAIhD,MAAM,cAAc,GAAG,KAAK,IAAyB,EAAE;IACrD,MAAM,MAAM,GAAG,MAAM,uBAAa,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;IAE/D,OAAO,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC;AAC3B,CAAC,CAAC;AAEK,MAAM,YAAY,GAAG,GAAG,EAAE;IAC/B,OAAO,IAAA,sBAAQ,EAAoB;QACjC,QAAQ,EAAE,CAAC,WAAW,CAAC;QACvB,OAAO,EAAE,cAAc;QACvB,SAAS,EAAE,QAAQ;QACnB,SAAS,EAAE,QAAQ;KAEkB,CAAC,CAAC;AAC3C,CAAC,CAAC;AARW,QAAA,YAAY,gBAQvB","sourcesContent":["import { useQuery, UseQueryOptions } from \"@tanstack/react-query\";\nimport axiosInstance from \"@/lib/axiosInstance\";\n\nimport { Location } from \"@/common/constants\";\n\nconst fetchLocations = async (): Promise<Location[]> => {\n  const result = await axiosInstance.get(\"/api/proxy/locations\");\n\n  return result.data?.data;\n};\n\nexport const useLocations = () => {\n  return useQuery<Location[], Error>({\n    queryKey: [\"locations\"],\n    queryFn: fetchLocations,\n    staleTime: Infinity,\n    cacheTime: Infinity,\n    // refetchOnWindowFocus: false,\n  } as UseQueryOptions<Location[], Error>);\n};\n"]}