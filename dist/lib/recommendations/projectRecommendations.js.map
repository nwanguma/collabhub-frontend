{"version":3,"file":"projectRecommendations.js","sourceRoot":"/","sources":["lib/recommendations/projectRecommendations.ts"],"names":[],"mappings":";;AAEA,MAAM,iBAAiB,GAAG,CAAC,EACzB,WAAW,EACX,QAAQ,GAKT,EAAa,EAAE;IACd,MAAM,EAAE,OAAO,EAAE,WAAW,EAAE,GAAG,WAAW,CAAC;IAE7C,OAAO,QAAQ;SACZ,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE;QACf,IAAI,KAAK,GAAG,CAAC,CAAC;QAEd,MAAM,YAAY,GAAG,OAAO,CAAC,WAAW;aACrC,KAAK,CAAC,GAAG,CAAC;aACV,MAAM,CAAC,CAAC,IAAI,EAAE,EAAE,CACf,WAAW,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAY,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CACrE,CAAC,MAAM,CAAC;QACX,KAAK,IAAI,YAAY,GAAG,CAAC,CAAC;QAE1B,IAAI,OAAO,CAAC,QAAQ,KAAK,WAAW,CAAC,QAAQ,EAAE,CAAC;YAC9C,KAAK,IAAI,CAAC,CAAC;QACb,CAAC;QAWD,MAAM,YAAY,GAChB,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;YACrD,CAAC,IAAI,GAAG,IAAI,GAAG,EAAE,CAAC,CAAC;QACrB,IAAI,YAAY,GAAG,EAAE,EAAE,CAAC;YACtB,KAAK,IAAI,CAAC,CAAC;QACb,CAAC;QAED,MAAM,eAAe,GACnB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,aAAa,EAAE,MAAM,IAAI,CAAC,EAAE,EAAE,CAAC,GAAG,CAAC,CAAC;QACxD,KAAK,IAAI,eAAe,CAAC;QAEzB,OAAO,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;IAC5B,CAAC,CAAC;SACD,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;SACjC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,kBAAe,iBAAiB,CAAC","sourcesContent":["import { Skill, Project } from \"@/common/constants\";\n\nconst recommendProjects = ({\n  currentUser,\n  projects,\n}: {\n  currentUser: any;\n  // currentUser: Profile,\n  projects: Project[];\n}): Project[] => {\n  const { profile: userProfile } = currentUser;\n\n  return projects\n    .map((project) => {\n      let score = 0;\n\n      const skillMatches = project.description\n        .split(\" \")\n        .filter((word) =>\n          userProfile.skills.map((skill: Skill) => skill.title).includes(word)\n        ).length;\n      score += skillMatches * 5;\n\n      if (project.location === userProfile.location) {\n        score += 3;\n      }\n\n      //Todo: more work on this\n      // const similarCollaborations = project.collaborators.filter(\n      //   (collaborator) =>\n      //     currentUser.collaborators.some(\n      //       (currentCollaborator) => currentCollaborator.id === collaborator.id\n      //     )\n      // ).length;\n      // score += similarCollaborations * 4;\n\n      const recentUpdate =\n        (new Date(project.updated_at).getTime() - Date.now()) /\n        (1000 * 3600 * 24);\n      if (recentUpdate < 30) {\n        score += 2;\n      }\n\n      const popularityScore =\n        Math.min(project?.collaborators?.length || 0, 50) / 5;\n      score += popularityScore;\n\n      return { project, score };\n    })\n    .sort((a, b) => b.score - a.score)\n    .map((result) => result.project);\n};\n\nexport default recommendProjects;\n"]}