{"version":3,"file":"axiosInstance.js","sourceRoot":"/","sources":["lib/axiosInstance.ts"],"names":[],"mappings":";;;;;AAAA,kDAA0B;AAC1B,2CAAsD;AACtD,mCAAgC;AAIhC,MAAM,aAAa,GAAG,eAAK,CAAC,MAAM,CAAC;IACjC,OAAO,EAAE,OAAO,CAAC,GAAG,CAAC,mBAAmB;CACzC,CAAC,CAAC;AACH,MAAM,cAAc,GAAG;IACrB,oBAAoB;IACpB,yBAAyB;IACzB,OAAO;CACR,CAAC;AAEF,aAAa,CAAC,YAAY,CAAC,OAAO,CAAC,GAAG,CACpC,KAAK,EAAE,MAAM,EAAE,EAAE;IACf,MAAM,qBAAqB,GACzB,aAAK,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,eAAe,CAAC;IAEzD,MAAM,eAAe,GAAG,cAAc,CAAC,IAAI,CACzC,CAAC,KAAK,EAAE,EAAE,CACR,MAAM,CAAC,GAAG,EAAE,UAAU,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,CACnE,CAAC;IACF,IACE,qBAAqB;QACrB,MAAM,CAAC,MAAM;QACb,MAAM,CAAC,MAAM,CAAC,WAAW,EAAE,KAAK,KAAK;QACrC,CAAC,eAAe,EAChB,CAAC;QACD,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;IACvE,CAAC;IAED,MAAM,OAAO,GAAG,MAAM,IAAA,kBAAU,GAAE,CAAC;IACnC,IAAI,OAAO,EAAE,WAAW,EAAE,CAAC;QACzB,MAAM,CAAC,OAAO,CAAC,aAAa,GAAG,UAAU,OAAO,CAAC,WAAW,EAAE,CAAC;IACjE,CAAC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,EACD,CAAC,KAAK,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CACjC,CAAC;AAEF,aAAa,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CACrC,CAAC,QAAQ,EAAE,EAAE;IACX,OAAO,QAAQ,CAAC;AAClB,CAAC,EAED,CAAC,KAAK,EAAE,EAAE;IACR,IAAI,KAAK,CAAC,QAAQ,EAAE,MAAM,KAAK,GAAG,EAAE,CAAC;QACnC,IAAA,eAAO,GAAE,CAAC;QACV,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;IACD,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC,CACF,CAAC;AAEF,kBAAe,aAAa,CAAC","sourcesContent":["import axios from \"axios\";\nimport { getSession, signOut } from \"next-auth/react\";\nimport { store } from \"@/store\";\nimport { CustomError } from \"./helpers/class\";\nimport { NextResponse } from \"next/server\";\n\nconst axiosInstance = axios.create({\n  baseURL: process.env.NEXT_PUBLIC_API_URL,\n});\nconst excludedRoutes = [\n  \"/api/proxy/profile\",\n  \"/api/proxy/files/upload\",\n  \"/auth\",\n];\n\naxiosInstance.interceptors.request.use(\n  async (config) => {\n    const profileRequiresUpdate =\n      store.getState()?.user?.data?.profile?.requires_update;\n\n    const isExcludedRoute = excludedRoutes.some(\n      (route) =>\n        config.url?.startsWith(route) && !config.url?.includes(\"follow\")\n    );\n    if (\n      profileRequiresUpdate &&\n      config.method &&\n      config.method.toLowerCase() !== \"get\" &&\n      !isExcludedRoute\n    ) {\n      throw new Error(\"Please update your profile to unlock full access!\");\n    }\n\n    const session = await getSession();\n    if (session?.accessToken) {\n      config.headers.Authorization = `Bearer ${session.accessToken}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\naxiosInstance.interceptors.response.use(\n  (response) => {\n    return response;\n  },\n\n  (error) => {\n    if (error.response?.status === 401) {\n      signOut();\n      localStorage.clear();\n    }\n    return Promise.reject(error);\n  }\n);\n\nexport default axiosInstance;\n"]}