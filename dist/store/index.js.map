{"version":3,"file":"index.js","sourceRoot":"/","sources":["store/index.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAmE;AACnE,iDAA6D;AAC7D,wEAAgD;AAEhD,kDAAiC;AACjC,8CAA6B;AAC7B,wEAAuD;AACvD,oEAAmD;AACnD,oEAAmD;AACnD,gEAA+C;AAE/C,MAAM,aAAa,GAAG;IACpB,GAAG,EAAE,MAAM;IACX,OAAO,EAAP,iBAAO;IACP,SAAS,EAAE;QACT,MAAM;QACN,iBAAiB;QACjB,eAAe;QACf,IAAI;QACJ,eAAe;QACf,aAAa;KACd;CACF,CAAC;AAEF,MAAM,WAAW,GAAG,IAAA,yBAAe,EAAC;IAClC,IAAI,EAAE,cAAW;IACjB,EAAE,EAAE,YAAS;IACb,eAAe,EAAE,yBAAsB;IACvC,aAAa,EAAE,uBAAoB;IACnC,aAAa,EAAE,uBAAoB;IACnC,WAAW,EAAE,qBAAkB;CAChC,CAAC,CAAC;AAEH,MAAM,gBAAgB,GAAG,IAAA,8BAAc,EAAC,aAAa,EAAE,WAAW,CAAC,CAAC;AAEvD,QAAA,KAAK,GAAG,IAAA,wBAAc,EAAC;IAClC,OAAO,EAAE,gBAAgB;IACzB,UAAU,EAAE,CAAC,oBAAoB,EAAE,EAAE,CACnC,oBAAoB,CAAC;QACnB,iBAAiB,EAAE,KAAK;KACzB,CAAC;CACL,CAAC,CAAC;AAEU,QAAA,SAAS,GAAG,IAAA,4BAAY,EAAC,aAAK,CAAC,CAAC;AACtC,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,iBAAS,CAAC,KAAK,EAAE,CAAC;AACpB,CAAC,CAAC;AAFW,QAAA,aAAa,iBAExB","sourcesContent":["import { configureStore, combineReducers } from \"@reduxjs/toolkit\";\nimport { persistStore, persistReducer } from \"redux-persist\";\nimport storage from \"redux-persist/lib/storage\";\n\nimport userReducer from \"./user\";\nimport uiReducer from \"./ui\";\nimport recommendationsReducer from \"./recommendations\";\nimport conversationsReducer from \"./conversations\";\nimport notificationsReducer from \"./notifications\";\nimport connectionsReducer from \"./connections\";\n\nconst persistConfig = {\n  key: \"root\",\n  storage,\n  whitelist: [\n    \"user\",\n    \"recommendations\",\n    \"conversations\",\n    \"ui\",\n    \"notifications\",\n    \"connections\",\n  ],\n};\n\nconst rootReducer = combineReducers({\n  user: userReducer,\n  ui: uiReducer,\n  recommendations: recommendationsReducer,\n  conversations: conversationsReducer,\n  notifications: notificationsReducer,\n  connections: connectionsReducer,\n});\n\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\n\nexport const store = configureStore({\n  reducer: persistedReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({\n      serializableCheck: false,\n    }),\n});\n\nexport const persistor = persistStore(store);\nexport const handleSignOut = () => {\n  persistor.purge();\n};\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"]}