{"version":3,"file":"index.js","sourceRoot":"/","sources":["store/conversations/index.ts"],"names":[],"mappings":";;;;;;;AAAA,8CAAgF;AAGhF,wEAAgD;AAUhD,MAAM,YAAY,GAAuB;IACvC,IAAI,EAAE,EAAE;IACR,kBAAkB,EAAE,EAAE;IACtB,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE,KAAK;IAChB,KAAK,EAAE,IAAI;CACZ,CAAC;AAEW,QAAA,kBAAkB,GAAG,IAAA,0BAAgB,EAChD,kCAAkC,EAClC,KAAK,IAAI,EAAE;IACT,MAAM,QAAQ,GAAG,MAAM,uBAAa,CAAC,GAAG,CAAC,0BAA0B,EAAE;QACnE,MAAM,EAAE;YACN,KAAK,EAAE,IAAI;YACX,IAAI,EAAE,CAAC;SACR;KACF,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;AAC7B,CAAC,CACF,CAAC;AAEF,MAAM,kBAAkB,GAAG,IAAA,qBAAW,EAAC;IACrC,IAAI,EAAE,eAAe;IACrB,YAAY;IACZ,QAAQ,EAAE;QACR,kBAAkB,EAAE,CAAC,KAAK,EAAE,MAAmC,EAAE,EAAE;YACjE,KAAK,CAAC,IAAI,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC;QAC/C,CAAC;QACD,qBAAqB,EAAE,CAAC,KAAK,EAAE,MAA6B,EAAE,EAAE;YAC9D,KAAK,CAAC,kBAAkB,GAAG,MAAM,CAAC,OAAO,CAAC;QAC5C,CAAC;KACF;IACD,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE;QACzB,OAAO,CAAC,OAAO,CAAC,0BAAkB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACpD,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;YACvB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,0BAAkB,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC9D,KAAK,CAAC,IAAI,GAAG,MAAM,CAAC,OAAO,CAAC;YAC5B,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;QAC1B,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,0BAAkB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC7D,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE,OAAO,IAAI,+BAA+B,CAAC;QACzE,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEU,KACX,kBAAkB,CAAC,OAAO,EADb,0BAAkB,0BAAE,6BAAqB,4BAC3B;AAC7B,kBAAe,kBAAkB,CAAC,OAAO,CAAC","sourcesContent":["import { createSlice, createAsyncThunk, PayloadAction } from \"@reduxjs/toolkit\";\n\nimport { Conversation } from \"@/common/constants\";\nimport axiosInstance from \"@/lib/axiosInstance\";\n\nexport interface ConversationsSlice {\n  data: Conversation[];\n  latestConversation: string;\n  isLoading: boolean;\n  error: string | null;\n  hasFetched: boolean;\n}\n\nconst initialState: ConversationsSlice = {\n  data: [],\n  latestConversation: \"\",\n  hasFetched: false,\n  isLoading: false,\n  error: null,\n};\n\nexport const fetchConversations = createAsyncThunk(\n  \"conversations/fetchConversations\",\n  async () => {\n    const response = await axiosInstance.get(\"/api/proxy/conversations\", {\n      params: {\n        limit: 1000,\n        page: 1,\n      },\n    });\n\n    return response.data?.data;\n  }\n);\n\nconst conversationsSlice = createSlice({\n  name: \"conversations\",\n  initialState,\n  reducers: {\n    addToConversations: (state, action: PayloadAction<Conversation>) => {\n      state.data = [action.payload, ...state.data];\n    },\n    setLatestConversation: (state, action: PayloadAction<string>) => {\n      state.latestConversation = action.payload;\n    },\n  },\n  extraReducers: (builder) => {\n    builder.addCase(fetchConversations.pending, (state) => {\n      state.isLoading = true;\n      state.error = null;\n    });\n    builder.addCase(fetchConversations.fulfilled, (state, action) => {\n      state.data = action.payload;\n      state.isLoading = false;\n      state.hasFetched = true;\n    });\n    builder.addCase(fetchConversations.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error?.message || \"Failed to fetch conversations\";\n    });\n  },\n});\n\nexport const { addToConversations, setLatestConversation } =\n  conversationsSlice.actions;\nexport default conversationsSlice.reducer;\n"]}