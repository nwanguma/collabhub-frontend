{"version":3,"file":"index.js","sourceRoot":"/","sources":["store/notifications/index.ts"],"names":[],"mappings":"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","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport axiosInstance from \"@/lib/axiosInstance\";\nimport { fetchConversations } from \"../conversations\";\nimport { arraysEqual } from \"@/lib/helpers\";\nimport { fetchConnections } from \"../connections\";\n\nexport const fetchNotifications = createAsyncThunk(\n  \"notifications/fetchNotifications\",\n  async (_, { rejectWithValue, dispatch }) => {\n    try {\n      const response = await axiosInstance.get(\n        \"/api/proxy/notifications/long-poll\"\n      );\n\n      if (response.data?.data?.length > 0) {\n        dispatch(fetchConnections());\n      }\n\n      if (response.data?.messages?.length > 0) {\n        dispatch(fetchConversations());\n      }\n\n      return response.data;\n    } catch (error) {\n      return rejectWithValue(\"Failed to fetch notifications\");\n    }\n  }\n);\n\ninterface NotificationState {\n  data: string[];\n  messages: string[];\n  status: \"idle\" | \"loading\" | \"succeeded\" | \"failed\";\n  error: string | null;\n}\n\nconst initialState: NotificationState = {\n  data: [],\n  messages: [],\n  status: \"idle\",\n  error: null,\n};\n\nconst notificationsSlice = createSlice({\n  name: \"notifications\",\n  initialState,\n  reducers: {\n    resetNotifications: (state) => {\n      state.data = [];\n      state.messages = [];\n    },\n    markAsRead: (state, action) => {\n      state.data = state.data.filter((data) => data !== action.payload.data);\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchNotifications.pending, (state) => {\n        state.status = \"loading\";\n      })\n      .addCase(fetchNotifications.fulfilled, (state, action) => {\n        if (action.payload.data?.length > 0) {\n          state.status = \"succeeded\";\n\n          const newData = [...state.data, ...action.payload.data];\n          const newMessages = [...state.messages, ...action.payload.messages];\n\n          if (!arraysEqual(state.data, newData)) {\n            state.data = Array.from(new Set(newData));\n          }\n\n          if (!arraysEqual(state.messages, newMessages)) {\n            state.messages = Array.from(new Set(newMessages));\n          }\n        }\n      })\n      .addCase(fetchNotifications.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload as string;\n      });\n  },\n});\n\nexport const { resetNotifications, markAsRead } = notificationsSlice.actions;\nexport default notificationsSlice.reducer;\n"]}