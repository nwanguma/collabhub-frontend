{"version":3,"file":"index.js","sourceRoot":"/","sources":["store/recommendations/index.ts"],"names":[],"mappings":";;;;;;AAAA,8CAAiE;AAEjE,wEAAgD;AAYhD,MAAM,YAAY,GAAyB;IACzC,QAAQ,EAAE,EAAE;IACZ,QAAQ,EAAE,EAAE;IACZ,gBAAgB,EAAE,EAAE;IACpB,SAAS,EAAE,KAAK;IAChB,KAAK,EAAE,IAAI;IACX,UAAU,EAAE,KAAK;CAClB,CAAC;AAEW,QAAA,oBAAoB,GAAG,IAAA,0BAAgB,EAClD,sCAAsC,EACtC,KAAK,IAAI,EAAE;IACT,MAAM,QAAQ,GAAG,MAAM,uBAAa,CAAC,GAAG,CAAC,4BAA4B,CAAC,CAAC;IAEvE,OAAO,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC;AAC7B,CAAC,CACF,CAAC;AAEF,MAAM,oBAAoB,GAAG,IAAA,qBAAW,EAAC;IACvC,IAAI,EAAE,iBAAiB;IACvB,YAAY;IACZ,QAAQ,EAAE,EAAE;IACZ,aAAa,EAAE,CAAC,OAAO,EAAE,EAAE;QACzB,OAAO,CAAC,OAAO,CAAC,4BAAoB,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,EAAE;YACtD,KAAK,CAAC,SAAS,GAAG,IAAI,CAAC;QACzB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,4BAAoB,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,MAAW,EAAE,EAAE;YACrE,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,gBAAgB,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC;YAChE,KAAK,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;YAChC,KAAK,CAAC,QAAQ,GAAG,QAAQ,IAAI,EAAE,CAAC;YAChC,KAAK,CAAC,gBAAgB,GAAG,gBAAgB,IAAI,EAAE,CAAC;YAChD,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;YACxB,KAAK,CAAC,KAAK,GAAG,IAAI,CAAC;QACrB,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,4BAAoB,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,MAAM,EAAE,EAAE;YAC/D,KAAK,CAAC,SAAS,GAAG,KAAK,CAAC;YACxB,KAAK,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,CAAC,OAAO,IAAI,iCAAiC,CAAC;QAC1E,CAAC,CAAC,CAAC;IACL,CAAC;CACF,CAAC,CAAC;AAEH,kBAAe,oBAAoB,CAAC,OAAO,CAAC","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\n\nimport axiosInstance from \"@/lib/axiosInstance\";\nimport { Profile, Project } from \"@/common/constants\";\n\ninterface RecommendationsState {\n  profiles: Profile[];\n  profilesToFollow: Profile[];\n  projects: Project[];\n  isLoading: boolean;\n  error: string | null;\n  hasFetched: boolean;\n}\n\nconst initialState: RecommendationsState = {\n  profiles: [],\n  projects: [],\n  profilesToFollow: [],\n  isLoading: false,\n  error: null,\n  hasFetched: false,\n};\n\nexport const fetchRecommendations = createAsyncThunk(\n  \"recommendations/fetchRecommendations\",\n  async () => {\n    const response = await axiosInstance.get(\"/api/proxy/recommendations\");\n\n    return response.data?.data;\n  }\n);\n\nconst recommendationsSlice = createSlice({\n  name: \"recommendations\",\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(fetchRecommendations.pending, (state) => {\n      state.isLoading = true;\n    });\n    builder.addCase(fetchRecommendations.fulfilled, (state, action: any) => {\n      state.isLoading = false;\n      const { profiles, projects, profilesToFollow } = action.payload;\n      state.profiles = profiles || [];\n      state.projects = projects || [];\n      state.profilesToFollow = profilesToFollow || [];\n      state.hasFetched = true;\n      state.error = null;\n    });\n    builder.addCase(fetchRecommendations.rejected, (state, action) => {\n      state.isLoading = false;\n      state.error = action.error.message || \"Failed to fetch recommendations\";\n    });\n  },\n});\n\nexport default recommendationsSlice.reducer;\n"]}